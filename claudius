#!/usr/bin/env python3

import os
import anthropic
from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.prompt import Prompt
from rich.syntax import Syntax
import pyperclip
from dotenv import load_dotenv
import yaml
import sys
import platform

# Define configuration paths
CONFIG_DIR = os.path.expanduser("~/.config/claudius")
CONFIG_FILE = os.path.join(CONFIG_DIR, "config.yaml")

# Load environment variables
load_dotenv()

def clear_screen():
    if platform.system() == "Windows":
        os.system('cls')
    else:
        os.system('clear')

class ClaudeTerminal:
    def __init__(self):
        self.load_config()
        self.setup_console()
        self.setup_client()
        self.conversation = []
        self.system_prompt = self.config['system_prompt']

    def load_config(self):
        try:
            # Create config directory if it doesn't exist
            os.makedirs(CONFIG_DIR, exist_ok=True)
            
            # If config doesn't exist, create default
            if not os.path.exists(CONFIG_FILE):
                default_config = {
                    "app": {
                        "full_screen": True,
                        "clear_on_start": True,
                        "theme": {
                            "user_prompt": "yellow",
                            "assistant_name": "bold blue",
                            "assistant_response": "green",
                            "code_block": "blue",
                            "error": "red",
                            "success": "green"
                        }
                    },
                    "claude": {
                        "model": "claude-3-5-sonnet-20241022",  # Current recommended model
                        "max_tokens": 1024,
                        "temperature": 0.7
                    },
                    "system_prompt": """You are a helpful programming teacher and mentor. Your responses should be:
                        1. Clear and educational
                        2. Include examples when relevant
                        3. Explain concepts thoroughly
                        4. Break down complex topics into digestible parts"""
                }
                with open(CONFIG_FILE, 'w') as f:
                    yaml.dump(default_config, f)
            
            with open(CONFIG_FILE, 'r') as file:
                self.config = yaml.safe_load(file)
        except Exception as e:
            print(f"Error loading config: {e}")
            sys.exit(1)

    def setup_console(self):
        self.console = Console()
        if self.config['app']['clear_on_start']:
            clear_screen()
        if self.config['app']['full_screen']:
            self.console.height = self.console.size.height

    def setup_client(self):
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        if not self.api_key:
            self.console.print("[yellow]ANTHROPIC_API_KEY not found in environment variables[/yellow]")
            self.api_key = Prompt.ask("[yellow]Please enter your Anthropic API key", password=True)
        
        try:
            self.client = anthropic.Anthropic(api_key=self.api_key)
            self.console.print("[green]Successfully connected to Claude![/green]")
        except Exception as e:
            self.console.print(f"[red]Error connecting to Claude: {str(e)}[/red]")
            sys.exit(1)

    def copy_to_clipboard(self, text):
        pyperclip.copy(text)
        self.console.print(f"[{self.config['app']['theme']['success']}]Code copied to clipboard![/]")

    def display_code_block(self, code, language="python"):
        syntax = Syntax(code, language, theme="monokai")
        self.console.print(Panel(syntax, border_style=self.config['app']['theme']['code_block']))
        
        self.console.print(f"[{self.config['app']['theme']['code_block']}]Press 'c' to copy code, any other key to continue[/]")
        if input().lower() == 'c':
            self.copy_to_clipboard(code)

    def parse_and_display_response(self, response):
        parts = response.split("```")
        
        for i, part in enumerate(parts):
            if i % 2 == 0:
                if part.strip():
                    self.console.print(Panel(
                        part.strip(),
                        border_style=self.config['app']['theme']['assistant_response']
                    ))
            else:
                code_lines = part.split('\n')
                language = code_lines[0] if code_lines[0] else "python"
                code = '\n'.join(code_lines[1:] if code_lines[0] else code_lines)
                if code.strip():
                    self.display_code_block(code, language)

    def start(self):
        self.console.print(f"[bold {self.config['app']['theme']['assistant_name']}]Welcome to Claude Terminal![/]")
        self.console.print("Type 'exit' to quit\n")

        while True:
            question = Prompt.ask(f"\n[bold {self.config['app']['theme']['user_prompt']}]You")
            
            if question.lower() == 'exit':
                break

            try:
                response = self.client.messages.create(
                    model=self.config['claude']['model'],
                    max_tokens=self.config['claude']['max_tokens'],
                    temperature=self.config['claude']['temperature'],
                    system=self.config['system_prompt'],
                    messages=[
                        *self.conversation,
                        {"role": "user", "content": question}
                    ]
                )

                self.conversation.append({"role": "user", "content": question})
                self.conversation.append({
                    "role": "assistant",
                    "content": response.content[0].text
                })

                self.console.print(f"\n[bold {self.config['app']['theme']['assistant_name']}]Claude")
                self.parse_and_display_response(response.content[0].text)
                
            except Exception as e:
                self.console.print(f"[{self.config['app']['theme']['error']}]Error getting response from Claude: {str(e)}[/]")

if __name__ == "__main__":
    terminal = ClaudeTerminal()
    terminal.start()