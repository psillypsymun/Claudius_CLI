#!/usr/bin/env python3

import os
import anthropic
from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.prompt import Prompt
from rich.syntax import Syntax
from rich.text import Text
import pyperclip
from dotenv import load_dotenv
import yaml
import sys
import platform
import json
import datetime

# Define configuration paths
CONFIG_DIR = os.path.expanduser("~/.config/claudius")
CONFIG_FILE = os.path.join(CONFIG_DIR, "config.yaml")

# Load environment variables
load_dotenv()

def clear_screen():
    if platform.system() == "Windows":
        os.system('cls')
    else:
        os.system('clear')

class ClaudeTerminal:
    def __init__(self):
        self.load_config()
        self.setup_console()
        self.setup_client()
        self.conversation = []
        self.system_prompt = self.config['system_prompt']
        self.conversation_title = None
        self.current_conversation_file = None
        self.conversation_created = None

        # Set up conversation logging
        self.logs_dir = os.path.expanduser("~/.config/claudius/conversations")
        os.makedirs(self.logs_dir, exist_ok=True)

    def load_config(self):
        try:
            print(f"Debug: Starting config load process")
            print(f"Debug: Config directory path: {CONFIG_DIR}")
            print(f"Debug: Config file path: {CONFIG_FILE}")

            # Create config directory
            print("Debug: Creating config directory...")
            os.makedirs(CONFIG_DIR, exist_ok=True)
            print(f"Debug: Config directory exists: {os.path.exists(CONFIG_DIR)}")

            # Define default config
            default_config = {
                "app": {
                    "full_screen": True,
                    "clear_on_start": True,
                    "show_copy_prompt": False,
                    "theme": {
                        "user_prompt": "yellow",
                        "assistant_name": "bold blue",
                        "assistant_response": "green",
                        "code_block": "blue",
                        "error": "red",
                        "success": "green"
                    }
                },
                "claude": {
                    "model": "claude-3-7-sonnet-latest",
                    "max_tokens": 1024,
                    "temperature": 0.7
                },
                "system_prompt": "You are a helpful programming teacher and mentor. Your responses should be:\n1. Clear and educational\n2. Include examples when relevant\n3. Explain concepts thoroughly\n4. Break down complex topics into digestible parts"
            }

            # Check if config file exists
            print(f"Debug: Checking if config file exists: {os.path.exists(CONFIG_FILE)}")

            if not os.path.exists(CONFIG_FILE):
                print("Debug: Config file doesn't exist, creating it...")
                try:
                    with open(CONFIG_FILE, 'w') as f:
                        print("Debug: Writing default config...")
                        yaml.dump(default_config, f, sort_keys=False, default_flow_style=False)
                    print("Debug: Default config written")

                    # Verify the file was created
                    print(f"Debug: Verifying config file exists: {os.path.exists(CONFIG_FILE)}")
                    if os.path.exists(CONFIG_FILE):
                        print(f"Debug: Config file size: {os.path.getsize(CONFIG_FILE)} bytes")
                except Exception as write_error:
                    print(f"Debug: Error writing config file: {str(write_error)}")
                    raise

            # Try to load the config
            print("Debug: Loading config file...")
            try:
                with open(CONFIG_FILE, 'r') as file:
                    self.config = yaml.safe_load(file)
                print("Debug: Config loaded successfully")
            except Exception as read_error:
                print(f"Debug: Error reading config: {str(read_error)}")
                print("Debug: Using default config")
                self.config = default_config

            # Verify config is loaded
            print(f"Debug: Config loaded: {'Yes' if self.config else 'No'}")

        except Exception as e:
            print(f"Debug: Fatal error in load_config: {str(e)}")
            print("Debug: Stack trace:", file=sys.stderr)
            import traceback
            traceback.print_exc()
            sys.exit(1)

    def setup_console(self):
        self.console = Console()
        if self.config['app']['clear_on_start']:
            clear_screen()
        if self.config['app']['full_screen']:
            self.console.height = self.console.size.height

    def setup_client(self):
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        if not self.api_key:
            self.console.print("[yellow]ANTHROPIC_API_KEY not found in environment variables[/yellow]")
            self.api_key = Prompt.ask("[yellow]Please enter your Anthropic API key", password=True)

        try:
            self.client = anthropic.Anthropic(api_key=self.api_key)
            self.console.print("[green]Successfully connected to Claude![/green]")
        except Exception as e:
            self.console.print(f"[red]Error connecting to Claude: {str(e)}[/red]")
            sys.exit(1)

    def get_multiline_input(self):
        lines = []
        self.console.print(f"\n[bold {self.config['app']['theme']['user_prompt']}]You (Press Enter twice to send)[/]")

        while True:
            try:
                line = input()
                # Check for exit command
                if line.strip().lower() == "exit" and not lines:
                    return "exit"
                if line.strip() == "":  # Empty line
                    if lines and lines[-1].strip() == "":  # Second empty line
                        break
                lines.append(line)
            except EOFError:
                break
            except KeyboardInterrupt:
                return "exit"

        return "\n".join(lines[:-1] if lines else [])  # Remove the last empty line

    def copy_to_clipboard(self, text):
        pyperclip.copy(text)
        self.console.print(f"[{self.config['app']['theme']['success']}]Code copied to clipboard![/]")

    def display_code_block(self, code, language="python"):
        # Create syntax object without width parameter
        syntax = Syntax(
            code,
            language,
            theme="monokai",
            word_wrap=True
        )

        # Wrap the syntax object in a panel that handles the width
        self.console.print(Panel(
            syntax,
            border_style=self.config['app']['theme']['code_block'],
            width=self.console.width - 2,
            expand=True
        ))

        show_copy_prompt = self.config['app'].get('show_copy_prompt', True)
        if show_copy_prompt:
            self.console.print(f"[{self.config['app']['theme']['code_block']}]Press 'c' to copy code, any other key to continue[/]")
            if input().lower() == 'c':
                self.copy_to_clipboard(code)

        show_copy_prompt = self.config['app'].get('show_copy_prompt', True)
        if show_copy_prompt:
            self.console.print(f"[{self.config['app']['theme']['code_block']}]Press 'c' to copy code, any other key to continue[/]")
            if input().lower() == 'c':
                self.copy_to_clipboard(code)

    def parse_and_display_response(self, response):
        parts = response.split("```")
        content_segments = []
        
        # First, parse all the content into segments
        for i, part in enumerate(parts):
            if i % 2 == 0:  # Regular text
                if part.strip():
                    text = Text(part.strip())
                    panel = Panel(
                        text,
                        border_style=self.config['app']['theme']['assistant_response'],
                        width=self.console.width - 2,
                        expand=True,
                        style="white"
                    )
                    content_segments.append(("text", panel))
            else:  # Code block
                code_lines = part.split('\n')
                language = code_lines[0] if code_lines[0] else "python"
                code = '\n'.join(code_lines[1:] if code_lines[0] else code_lines)
                if code.strip():
                    content_segments.append(("code", (code, language)))
        
        # Calculate terminal height (approximately how many lines we can show at once)
        terminal_height = self.console.size.height
        max_lines_per_page = terminal_height - 5  # Leave some space for prompts
        
        # Display content in pages
        current_line = 0
        for segment_type, content in content_segments:
            if segment_type == "text":
                panel = content
                # Estimate panel height (this is approximate)
                panel_text = panel.renderable
                panel_lines = len(str(panel_text).split('\n'))
                
                # Check if we need to paginate
                if current_line + panel_lines > max_lines_per_page and current_line > 0:
                    self.console.print("\n[bold yellow]Press Enter to continue...[/]", end="")
                    input()
                    current_line = 0
                
                self.console.print(panel)
                current_line += panel_lines
                
            elif segment_type == "code":
                code, language = content
                # Estimate code block height
                code_lines = len(code.split('\n'))
                
                # Check if we need to paginate
                if current_line + code_lines + 5 > max_lines_per_page and current_line > 0:  # +5 for code block formatting
                    self.console.print("\n[bold yellow]Press Enter to continue...[/]", end="")
                    input()
                    current_line = 0
                
                self.display_code_block(code, language)
                current_line += code_lines + 5  # Add some space for the code block formatting

    def save_conversation(self):
        if not self.conversation:
            return  # Don't save empty conversations
        
        # If we're continuing an existing conversation, update that file
        if self.current_conversation_file:
            file_path = self.current_conversation_file
            
            # Update the existing file with current conversation data
            conversation_data = {
                "title": self.conversation_title or "Untitled",
                "last_updated": datetime.datetime.now().strftime("%Y%m%d_%H%M%S"),
                "created": self.conversation_created,  # Preserve original creation timestamp
                "system_prompt": self.system_prompt,
                "messages": self.conversation
            }
        else:
            # Generate a unique filename with timestamp for new conversation
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            self.conversation_created = timestamp  # Store creation time
            
            title = self.conversation_title or "Untitled"
            safe_title = "".join([c if c.isalnum() else "_" for c in title]).lower()
            filename = f"{timestamp}_{safe_title}.json"
            file_path = os.path.join(self.logs_dir, filename)
            
            # Save the new conversation to a file
            conversation_data = {
                "title": self.conversation_title or "Untitled",
                "created": timestamp,
                "last_updated": timestamp,
                "system_prompt": self.system_prompt,
                "messages": self.conversation
            }
            
            self.current_conversation_file = file_path
        
        # Write the data to file
        with open(file_path, 'w') as f:
            json.dump(conversation_data, f, indent=2)
            
        return file_path
        
    def list_conversations(self):
        conversations = []
        for filename in sorted(os.listdir(self.logs_dir), reverse=True):
            if filename.endswith('.json'):
                file_path = os.path.join(self.logs_dir, filename)
                try:
                    with open(file_path, 'r') as f:
                        data = json.load(f)
                        # Get the first user message for the preview
                        preview = ""
                        messages = data.get("messages", [])
                        for msg in messages:
                            if msg.get("role") == "user":
                                preview = msg.get("content", "")[:50] + "..." if len(msg.get("content", "")) > 50 else msg.get("content", "")
                                break
                                
                        # Use last_updated if available, otherwise fall back to created
                        timestamp = data.get("last_updated", data.get("created", "Unknown"))
                        
                        conversations.append({
                            "file_path": file_path,
                            "title": data.get("title", "Untitled"),
                            "timestamp": timestamp,
                            "preview": preview,
                            "message_count": len(messages) // 2  # Rough estimate of Q&A pairs
                        })
                except Exception as e:
                    self.console.print(f"[red]Error loading {filename}: {str(e)}[/red]")
        
        return conversations
        
    def load_conversation(self, file_path):
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
                self.conversation = data.get("messages", [])
                self.system_prompt = data.get("system_prompt", self.config['system_prompt'])
                self.conversation_title = data.get("title", "Untitled")
                self.conversation_created = data.get("created", datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
                self.current_conversation_file = file_path
                return True
        except Exception as e:
            self.console.print(f"[red]Error loading conversation: {str(e)}[/red]")
            return False
            
    def prompt_for_conversation_title(self, default_title=None):
        if not default_title and self.conversation:
            # Try to generate a title from the first user message
            first_message = next((m["content"] for m in self.conversation if m["role"] == "user"), "")
            default_title = first_message[:30] + "..." if len(first_message) > 30 else first_message
            
        title = Prompt.ask(
            "[yellow]Enter a title for this conversation[/]", 
            default=default_title or "Untitled"
        )
        self.conversation_title = title
        
    def show_conversation_selector(self):
        conversations = self.list_conversations()
        if not conversations:
            self.console.print("[yellow]No saved conversations found[/yellow]")
            return None
            
        self.console.print("[bold]Select a conversation to continue:[/bold]")
        for i, conv in enumerate(conversations):
            try:
                # Format the date nicely
                date_str = datetime.datetime.strptime(conv["timestamp"], "%Y%m%d_%H%M%S").strftime("%Y-%m-%d %H:%M")
                
                # Show conversation details with message count
                msg_count = conv.get("message_count", 0)
                msg_text = f"{msg_count} message{'s' if msg_count != 1 else ''}"
                
                self.console.print(f"[bold]{i+1}.[/bold] {conv['title']} - {date_str} ({msg_text})")
                self.console.print(f"   {conv['preview']}")
            except Exception:
                # Fallback if date parsing fails
                self.console.print(f"[bold]{i+1}.[/bold] {conv['title']}")
                self.console.print(f"   {conv['preview']}")
            
        self.console.print(f"[bold]0.[/bold] Start a new conversation")
        
        choice = Prompt.ask(
            "[yellow]Enter your choice[/yellow]", 
            default="0",
            choices=[str(i) for i in range(len(conversations) + 1)]
        )
        
        if choice == "0":
            return None
        else:
            return conversations[int(choice) - 1]["file_path"]

    def start(self):
        self.console.print(f"[bold {self.config['app']['theme']['assistant_name']}]Welcome to Claude Terminal![/]")
        self.console.print("Commands:")
        self.console.print("- Type 'exit' on an empty line to quit")
        self.console.print("- Type 'load' on an empty line to load a previous conversation") 
        self.console.print("- Enter two empty lines to send message\n")
        
        # Ask if user wants to continue a previous conversation
        self.console.print("[bold yellow]Would you like to continue a previous conversation? (y/n)[/bold yellow]")
        if input().lower().startswith('y'):
            conv_path = self.show_conversation_selector()
            if conv_path:
                self.load_conversation(conv_path)
                self.console.print(f"[green]Loaded conversation: {self.conversation_title}[/green]")
                
                # Print the conversation history
                for msg in self.conversation:
                    if msg["role"] == "user":
                        self.console.print(f"\n[bold {self.config['app']['theme']['user_prompt']}]You[/]")
                        self.console.print(msg["content"])
                    elif msg["role"] == "assistant":
                        self.console.print(f"\n[bold {self.config['app']['theme']['assistant_name']}]Claude[/]")
                        self.parse_and_display_response(msg["content"])

        while True:
            question = self.get_multiline_input()

            question_lower = question.lower().strip()
            if question_lower == 'exit':
                # Automatically save the conversation before exiting if it's not empty
                if self.conversation and not self.current_conversation_file:
                    # Auto-generate title from first message
                    first_message = next((m["content"] for m in self.conversation if m["role"] == "user"), "")
                    words = first_message.split()
                    title = " ".join(words[:10])
                    if len(words) > 10:
                        title += "..."
                    self.conversation_title = title
                    
                    file_path = self.save_conversation()
                    if file_path:
                        self.console.print(f"[green]Conversation saved[/green]")
                
                self.console.print("[yellow]Goodbye![/yellow]")
                break
                
            elif question_lower == 'load':
                conv_path = self.show_conversation_selector()
                if conv_path:
                    self.load_conversation(conv_path)
                    self.console.print(f"[green]Loaded conversation: {self.conversation_title}[/green]")
                    
                    # Print the conversation history
                    for msg in self.conversation:
                        if msg["role"] == "user":
                            self.console.print(f"\n[bold {self.config['app']['theme']['user_prompt']}]You[/]")
                            self.console.print(msg["content"])
                        elif msg["role"] == "assistant":
                            self.console.print(f"\n[bold {self.config['app']['theme']['assistant_name']}]Claude[/]")
                            self.parse_and_display_response(msg["content"])
                continue

            try:
                self.console.print(f"\n[bold {self.config['app']['theme']['assistant_name']}]Claude")
                
                with self.console.status("[bold green]Waiting for Claude's response...", spinner="dots"):
                    response = self.client.messages.create(
                        model=self.config['claude']['model'],
                        max_tokens=self.config['claude']['max_tokens'],
                        temperature=self.config['claude']['temperature'],
                        system=self.config['system_prompt'],
                        messages=[
                            *self.conversation,
                            {"role": "user", "content": question}
                        ]
                    )

                    self.conversation.append({"role": "user", "content": question})
                    self.conversation.append({
                        "role": "assistant",
                        "content": response.content[0].text
                    })
                    
                # Automatically save after first message exchange
                if len(self.conversation) == 2 and not self.conversation_title:
                    # Auto-generate title from first 10 words of user's first message
                    first_message = self.conversation[0]["content"]
                    words = first_message.split()
                    title = " ".join(words[:10])
                    if len(words) > 10:
                        title += "..."
                    self.conversation_title = title
                    
                    # Save the conversation
                    file_path = self.save_conversation()
                    if file_path:
                        self.console.print(f"[green]Conversation saved[/green]")
                # For existing conversations, update the saved file
                elif self.current_conversation_file and len(self.conversation) > 2:
                    self.save_conversation()

                # Display response without cursor positioning (fixed compatibility issue)
                self.parse_and_display_response(response.content[0].text)

            except Exception as e:
                self.console.print(f"[{self.config['app']['theme']['error']}]Error getting response from Claude: {str(e)}[/]")

if __name__ == "__main__":
    terminal = ClaudeTerminal()
    terminal.start()
